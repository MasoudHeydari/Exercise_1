// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/MasoudHeydari/Exercise_1/Task2_imagy/ent/image"
)

// Image is the model entity for the Image schema.
type Image struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// OriginalURL holds the value of the "original_url" field.
	OriginalURL string `json:"original_url,omitempty"`
	// LocalName holds the value of the "local_name" field.
	LocalName string `json:"local_name,omitempty"`
	// FileExtension holds the value of the "file_extension" field.
	FileExtension string `json:"file_extension,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int64 `json:"file_size,omitempty"`
	// DownloadDate holds the value of the "download_date" field.
	DownloadDate time.Time `json:"download_date,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Image) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case image.FieldID, image.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case image.FieldOriginalURL, image.FieldLocalName, image.FieldFileExtension:
			values[i] = new(sql.NullString)
		case image.FieldDownloadDate:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Image fields.
func (i *Image) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case image.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			i.ID = int64(value.Int64)
		case image.FieldOriginalURL:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_url", values[j])
			} else if value.Valid {
				i.OriginalURL = value.String
			}
		case image.FieldLocalName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_name", values[j])
			} else if value.Valid {
				i.LocalName = value.String
			}
		case image.FieldFileExtension:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_extension", values[j])
			} else if value.Valid {
				i.FileExtension = value.String
			}
		case image.FieldFileSize:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[j])
			} else if value.Valid {
				i.FileSize = value.Int64
			}
		case image.FieldDownloadDate:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field download_date", values[j])
			} else if value.Valid {
				i.DownloadDate = value.Time
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Image.
// This includes values selected through modifiers, order, etc.
func (i *Image) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Image.
// Note that you need to call Image.Unwrap() before calling this method if this Image
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Image) Update() *ImageUpdateOne {
	return NewImageClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Image entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Image) Unwrap() *Image {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Image is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Image) String() string {
	var builder strings.Builder
	builder.WriteString("Image(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("original_url=")
	builder.WriteString(i.OriginalURL)
	builder.WriteString(", ")
	builder.WriteString("local_name=")
	builder.WriteString(i.LocalName)
	builder.WriteString(", ")
	builder.WriteString("file_extension=")
	builder.WriteString(i.FileExtension)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", i.FileSize))
	builder.WriteString(", ")
	builder.WriteString("download_date=")
	builder.WriteString(i.DownloadDate.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Images is a parsable slice of Image.
type Images []*Image
