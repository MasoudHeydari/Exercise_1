// Code generated by ent, DO NOT EDIT.

package image

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the image type in the database.
	Label = "image"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOriginalURL holds the string denoting the original_url field in the database.
	FieldOriginalURL = "original_url"
	// FieldLocalName holds the string denoting the local_name field in the database.
	FieldLocalName = "local_name"
	// FieldFileExtension holds the string denoting the file_extension field in the database.
	FieldFileExtension = "file_extension"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldDownloadDate holds the string denoting the download_date field in the database.
	FieldDownloadDate = "download_date"
	// Table holds the table name of the image in the database.
	Table = "images"
)

// Columns holds all SQL columns for image fields.
var Columns = []string{
	FieldID,
	FieldOriginalURL,
	FieldLocalName,
	FieldFileExtension,
	FieldFileSize,
	FieldDownloadDate,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// OriginalURLValidator is a validator for the "original_url" field. It is called by the builders before save.
	OriginalURLValidator func(string) error
	// LocalNameValidator is a validator for the "local_name" field. It is called by the builders before save.
	LocalNameValidator func(string) error
	// FileExtensionValidator is a validator for the "file_extension" field. It is called by the builders before save.
	FileExtensionValidator func(string) error
	// DefaultDownloadDate holds the default value on creation for the "download_date" field.
	DefaultDownloadDate func() time.Time
)

// OrderOption defines the ordering options for the Image queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOriginalURL orders the results by the original_url field.
func ByOriginalURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalURL, opts...).ToFunc()
}

// ByLocalName orders the results by the local_name field.
func ByLocalName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalName, opts...).ToFunc()
}

// ByFileExtension orders the results by the file_extension field.
func ByFileExtension(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileExtension, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByDownloadDate orders the results by the download_date field.
func ByDownloadDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDownloadDate, opts...).ToFunc()
}
