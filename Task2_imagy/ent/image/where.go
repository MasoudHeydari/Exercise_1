// Code generated by ent, DO NOT EDIT.

package image

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/MasoudHeydari/Exercise_1/Task2_imagy/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldID, id))
}

// OriginalURL applies equality check predicate on the "original_url" field. It's identical to OriginalURLEQ.
func OriginalURL(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldOriginalURL, v))
}

// LocalName applies equality check predicate on the "local_name" field. It's identical to LocalNameEQ.
func LocalName(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldLocalName, v))
}

// FileExtension applies equality check predicate on the "file_extension" field. It's identical to FileExtensionEQ.
func FileExtension(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFileExtension, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFileSize, v))
}

// DownloadDate applies equality check predicate on the "download_date" field. It's identical to DownloadDateEQ.
func DownloadDate(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDownloadDate, v))
}

// OriginalURLEQ applies the EQ predicate on the "original_url" field.
func OriginalURLEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldOriginalURL, v))
}

// OriginalURLNEQ applies the NEQ predicate on the "original_url" field.
func OriginalURLNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldOriginalURL, v))
}

// OriginalURLIn applies the In predicate on the "original_url" field.
func OriginalURLIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldOriginalURL, vs...))
}

// OriginalURLNotIn applies the NotIn predicate on the "original_url" field.
func OriginalURLNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldOriginalURL, vs...))
}

// OriginalURLGT applies the GT predicate on the "original_url" field.
func OriginalURLGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldOriginalURL, v))
}

// OriginalURLGTE applies the GTE predicate on the "original_url" field.
func OriginalURLGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldOriginalURL, v))
}

// OriginalURLLT applies the LT predicate on the "original_url" field.
func OriginalURLLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldOriginalURL, v))
}

// OriginalURLLTE applies the LTE predicate on the "original_url" field.
func OriginalURLLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldOriginalURL, v))
}

// OriginalURLContains applies the Contains predicate on the "original_url" field.
func OriginalURLContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldOriginalURL, v))
}

// OriginalURLHasPrefix applies the HasPrefix predicate on the "original_url" field.
func OriginalURLHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldOriginalURL, v))
}

// OriginalURLHasSuffix applies the HasSuffix predicate on the "original_url" field.
func OriginalURLHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldOriginalURL, v))
}

// OriginalURLEqualFold applies the EqualFold predicate on the "original_url" field.
func OriginalURLEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldOriginalURL, v))
}

// OriginalURLContainsFold applies the ContainsFold predicate on the "original_url" field.
func OriginalURLContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldOriginalURL, v))
}

// LocalNameEQ applies the EQ predicate on the "local_name" field.
func LocalNameEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldLocalName, v))
}

// LocalNameNEQ applies the NEQ predicate on the "local_name" field.
func LocalNameNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldLocalName, v))
}

// LocalNameIn applies the In predicate on the "local_name" field.
func LocalNameIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldLocalName, vs...))
}

// LocalNameNotIn applies the NotIn predicate on the "local_name" field.
func LocalNameNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldLocalName, vs...))
}

// LocalNameGT applies the GT predicate on the "local_name" field.
func LocalNameGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldLocalName, v))
}

// LocalNameGTE applies the GTE predicate on the "local_name" field.
func LocalNameGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldLocalName, v))
}

// LocalNameLT applies the LT predicate on the "local_name" field.
func LocalNameLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldLocalName, v))
}

// LocalNameLTE applies the LTE predicate on the "local_name" field.
func LocalNameLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldLocalName, v))
}

// LocalNameContains applies the Contains predicate on the "local_name" field.
func LocalNameContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldLocalName, v))
}

// LocalNameHasPrefix applies the HasPrefix predicate on the "local_name" field.
func LocalNameHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldLocalName, v))
}

// LocalNameHasSuffix applies the HasSuffix predicate on the "local_name" field.
func LocalNameHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldLocalName, v))
}

// LocalNameEqualFold applies the EqualFold predicate on the "local_name" field.
func LocalNameEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldLocalName, v))
}

// LocalNameContainsFold applies the ContainsFold predicate on the "local_name" field.
func LocalNameContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldLocalName, v))
}

// FileExtensionEQ applies the EQ predicate on the "file_extension" field.
func FileExtensionEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFileExtension, v))
}

// FileExtensionNEQ applies the NEQ predicate on the "file_extension" field.
func FileExtensionNEQ(v string) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldFileExtension, v))
}

// FileExtensionIn applies the In predicate on the "file_extension" field.
func FileExtensionIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldFileExtension, vs...))
}

// FileExtensionNotIn applies the NotIn predicate on the "file_extension" field.
func FileExtensionNotIn(vs ...string) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldFileExtension, vs...))
}

// FileExtensionGT applies the GT predicate on the "file_extension" field.
func FileExtensionGT(v string) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldFileExtension, v))
}

// FileExtensionGTE applies the GTE predicate on the "file_extension" field.
func FileExtensionGTE(v string) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldFileExtension, v))
}

// FileExtensionLT applies the LT predicate on the "file_extension" field.
func FileExtensionLT(v string) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldFileExtension, v))
}

// FileExtensionLTE applies the LTE predicate on the "file_extension" field.
func FileExtensionLTE(v string) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldFileExtension, v))
}

// FileExtensionContains applies the Contains predicate on the "file_extension" field.
func FileExtensionContains(v string) predicate.Image {
	return predicate.Image(sql.FieldContains(FieldFileExtension, v))
}

// FileExtensionHasPrefix applies the HasPrefix predicate on the "file_extension" field.
func FileExtensionHasPrefix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasPrefix(FieldFileExtension, v))
}

// FileExtensionHasSuffix applies the HasSuffix predicate on the "file_extension" field.
func FileExtensionHasSuffix(v string) predicate.Image {
	return predicate.Image(sql.FieldHasSuffix(FieldFileExtension, v))
}

// FileExtensionEqualFold applies the EqualFold predicate on the "file_extension" field.
func FileExtensionEqualFold(v string) predicate.Image {
	return predicate.Image(sql.FieldEqualFold(FieldFileExtension, v))
}

// FileExtensionContainsFold applies the ContainsFold predicate on the "file_extension" field.
func FileExtensionContainsFold(v string) predicate.Image {
	return predicate.Image(sql.FieldContainsFold(FieldFileExtension, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int64) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int64) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int64) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int64) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int64) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int64) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int64) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int64) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldFileSize, v))
}

// DownloadDateEQ applies the EQ predicate on the "download_date" field.
func DownloadDateEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldEQ(FieldDownloadDate, v))
}

// DownloadDateNEQ applies the NEQ predicate on the "download_date" field.
func DownloadDateNEQ(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldNEQ(FieldDownloadDate, v))
}

// DownloadDateIn applies the In predicate on the "download_date" field.
func DownloadDateIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldIn(FieldDownloadDate, vs...))
}

// DownloadDateNotIn applies the NotIn predicate on the "download_date" field.
func DownloadDateNotIn(vs ...time.Time) predicate.Image {
	return predicate.Image(sql.FieldNotIn(FieldDownloadDate, vs...))
}

// DownloadDateGT applies the GT predicate on the "download_date" field.
func DownloadDateGT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGT(FieldDownloadDate, v))
}

// DownloadDateGTE applies the GTE predicate on the "download_date" field.
func DownloadDateGTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldGTE(FieldDownloadDate, v))
}

// DownloadDateLT applies the LT predicate on the "download_date" field.
func DownloadDateLT(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLT(FieldDownloadDate, v))
}

// DownloadDateLTE applies the LTE predicate on the "download_date" field.
func DownloadDateLTE(v time.Time) predicate.Image {
	return predicate.Image(sql.FieldLTE(FieldDownloadDate, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Image) predicate.Image {
	return predicate.Image(func(s *sql.Selector) {
		p(s.Not())
	})
}
