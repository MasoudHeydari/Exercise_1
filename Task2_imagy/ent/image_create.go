// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/MasoudHeydari/Exercise_1/Task2_imagy/ent/image"
)

// ImageCreate is the builder for creating a Image entity.
type ImageCreate struct {
	config
	mutation *ImageMutation
	hooks    []Hook
}

// SetOriginalURL sets the "original_url" field.
func (ic *ImageCreate) SetOriginalURL(s string) *ImageCreate {
	ic.mutation.SetOriginalURL(s)
	return ic
}

// SetLocalName sets the "local_name" field.
func (ic *ImageCreate) SetLocalName(s string) *ImageCreate {
	ic.mutation.SetLocalName(s)
	return ic
}

// SetFileExtension sets the "file_extension" field.
func (ic *ImageCreate) SetFileExtension(s string) *ImageCreate {
	ic.mutation.SetFileExtension(s)
	return ic
}

// SetFileSize sets the "file_size" field.
func (ic *ImageCreate) SetFileSize(i int64) *ImageCreate {
	ic.mutation.SetFileSize(i)
	return ic
}

// SetDownloadDate sets the "download_date" field.
func (ic *ImageCreate) SetDownloadDate(t time.Time) *ImageCreate {
	ic.mutation.SetDownloadDate(t)
	return ic
}

// SetNillableDownloadDate sets the "download_date" field if the given value is not nil.
func (ic *ImageCreate) SetNillableDownloadDate(t *time.Time) *ImageCreate {
	if t != nil {
		ic.SetDownloadDate(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *ImageCreate) SetID(i int64) *ImageCreate {
	ic.mutation.SetID(i)
	return ic
}

// Mutation returns the ImageMutation object of the builder.
func (ic *ImageCreate) Mutation() *ImageMutation {
	return ic.mutation
}

// Save creates the Image in the database.
func (ic *ImageCreate) Save(ctx context.Context) (*Image, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *ImageCreate) SaveX(ctx context.Context) *Image {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *ImageCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *ImageCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *ImageCreate) defaults() {
	if _, ok := ic.mutation.DownloadDate(); !ok {
		v := image.DefaultDownloadDate()
		ic.mutation.SetDownloadDate(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *ImageCreate) check() error {
	if _, ok := ic.mutation.OriginalURL(); !ok {
		return &ValidationError{Name: "original_url", err: errors.New(`ent: missing required field "Image.original_url"`)}
	}
	if v, ok := ic.mutation.OriginalURL(); ok {
		if err := image.OriginalURLValidator(v); err != nil {
			return &ValidationError{Name: "original_url", err: fmt.Errorf(`ent: validator failed for field "Image.original_url": %w`, err)}
		}
	}
	if _, ok := ic.mutation.LocalName(); !ok {
		return &ValidationError{Name: "local_name", err: errors.New(`ent: missing required field "Image.local_name"`)}
	}
	if v, ok := ic.mutation.LocalName(); ok {
		if err := image.LocalNameValidator(v); err != nil {
			return &ValidationError{Name: "local_name", err: fmt.Errorf(`ent: validator failed for field "Image.local_name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.FileExtension(); !ok {
		return &ValidationError{Name: "file_extension", err: errors.New(`ent: missing required field "Image.file_extension"`)}
	}
	if v, ok := ic.mutation.FileExtension(); ok {
		if err := image.FileExtensionValidator(v); err != nil {
			return &ValidationError{Name: "file_extension", err: fmt.Errorf(`ent: validator failed for field "Image.file_extension": %w`, err)}
		}
	}
	if _, ok := ic.mutation.FileSize(); !ok {
		return &ValidationError{Name: "file_size", err: errors.New(`ent: missing required field "Image.file_size"`)}
	}
	if _, ok := ic.mutation.DownloadDate(); !ok {
		return &ValidationError{Name: "download_date", err: errors.New(`ent: missing required field "Image.download_date"`)}
	}
	return nil
}

func (ic *ImageCreate) sqlSave(ctx context.Context) (*Image, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *ImageCreate) createSpec() (*Image, *sqlgraph.CreateSpec) {
	var (
		_node = &Image{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(image.Table, sqlgraph.NewFieldSpec(image.FieldID, field.TypeInt64))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.OriginalURL(); ok {
		_spec.SetField(image.FieldOriginalURL, field.TypeString, value)
		_node.OriginalURL = value
	}
	if value, ok := ic.mutation.LocalName(); ok {
		_spec.SetField(image.FieldLocalName, field.TypeString, value)
		_node.LocalName = value
	}
	if value, ok := ic.mutation.FileExtension(); ok {
		_spec.SetField(image.FieldFileExtension, field.TypeString, value)
		_node.FileExtension = value
	}
	if value, ok := ic.mutation.FileSize(); ok {
		_spec.SetField(image.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := ic.mutation.DownloadDate(); ok {
		_spec.SetField(image.FieldDownloadDate, field.TypeTime, value)
		_node.DownloadDate = value
	}
	return _node, _spec
}

// ImageCreateBulk is the builder for creating many Image entities in bulk.
type ImageCreateBulk struct {
	config
	builders []*ImageCreate
}

// Save creates the Image entities in the database.
func (icb *ImageCreateBulk) Save(ctx context.Context) ([]*Image, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Image, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ImageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *ImageCreateBulk) SaveX(ctx context.Context) []*Image {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *ImageCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *ImageCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
